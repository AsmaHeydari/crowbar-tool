module Reference;
data Spec = ObjInv(Bool) | Ensures(Bool) | Requires(Bool) | WhileInv(Bool);

interface I {}

[Spec: Requires(this.other != null)]
[Spec: ObjInv(this.other != null)]
class C(I other) implements I {

//should not close: we do not return other
[Spec : Ensures(result == this.other)]
	I m1(){  	
	   I j = new C(this.other);
	    return j;
	}

//should close: we do not return other
//however, we do not model that new always returns something that did not exist before
[Spec : Ensures(result != this.other)]
	I m2(){  	
	   I j = new C(this.other);
	    return j;
	}

//should close: we do not return other
[Spec : Ensures(result == this.other)]
	I m3(){  	
	   I j = new C(this.other);
	    return this.other;
	}


//should close: we do not return other
[Spec : Ensures(result != null)]
	I m4(){  	
	   I j = new C(this.other);
	    return j;
	}
	

}
          

{
//should not close
	new C(null);
}
